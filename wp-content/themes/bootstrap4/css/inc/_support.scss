// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.
$legacy-support-for-ie: true !default;

// Setting this to false will result in smaller output, but no support for ie6 hacks
$legacy-support-for-ie6: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for ie7 hacks
$legacy-support-for-ie7: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for legacy ie8 hacks
$legacy-support-for-ie8: $legacy-support-for-ie !default;

// @private
// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,
// But in case the user set each of those explicitly, we need to sync the value of
// this combined variable.
$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;

// Whether to output legacy support for mozilla.
// Usually this means hacks to support Firefox 3.6 or earlier.
$legacy-support-for-mozilla: true;

// Support for mozilla in experimental css3 properties (-moz).
$experimental-support-for-mozilla      : true !default;
// Support for webkit in experimental css3 properties (-webkit).
$experimental-support-for-webkit       : true !default;
// Support for webkit's original (non-standard) gradient syntax.
$support-for-original-webkit-gradients : true !default;
// Support for opera in experimental css3 properties (-o).
$experimental-support-for-opera        : true !default;
// Support for microsoft in experimental css3 properties (-ms).
$experimental-support-for-microsoft    : true !default;
// Support for khtml in experimental css3 properties (-khtml).
$experimental-support-for-khtml        : false !default;
// Support for svg in experimental css3 properties.
// Setting this to true might add significant size to your
// generated stylesheets.
$experimental-support-for-svg          : false !default;
// Support for CSS PIE in experimental css3 properties (-pie).
$experimental-support-for-pie          : false !default;


// This mixin provides basic support for CSS3 properties and
// their corresponding experimental CSS2 properties when
// the implementations are identical except for the property
// prefix.
@mixin experimental($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
	@if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }
	@if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }
	@if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }
	@if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }
	@if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }
	@if $official                                        {         #{$property} : $value; }
}

// Same as experimental(), but for cases when the property is the same and the value is vendorized
@mixin experimental-value($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
	@if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }
	@if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }
	@if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }
	@if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }
	@if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }
	@if $official                                        { #{$property} :         #{$value}; }
}

@mixin set-experimental-support($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) {
	$experimental-support-for-mozilla: $moz;
	$experimental-support-for-webkit: $webkit;
	$experimental-support-for-microsoft: $ms;
	$experimental-support-for-opera: $o;
	$experimental-support-for-khtml: $khtml;
}

@mixin with-only-support-for($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) {
	// Capture the current state
	$original-moz: $experimental-support-for-mozilla;
	$original-webkit: $experimental-support-for-webkit;
	$original-o: $experimental-support-for-opera;
	$original-ms: $experimental-support-for-microsoft;
	$original-khtml: $experimental-support-for-khtml;

	@include set-experimental-support($moz, $webkit, $ms, $o, $khtml);

	@content;

	@include set-experimental-support($original-moz, $original-webkit, $original-ms, $original-o, $original-khtml);
}

@function compact($vars...) {
	$list: ();
	@each $var in $vars {
		@if $var {
			$list: append($list, $var, comma);
		}
	}
	@return $list;
}

@function -compass-space-list($item1, $item2: null, $item3: null, $item4: null, $item5: null, $item6: null, $item7: null, $item8: null, $item9: null) {
	// Support for polymorphism.
	@if type-of($item1) == "list" {
		// Passing a single array of properties.
		$items: $item1;
	} @else {
		$items: $item1 $item2 $item3 $item4 $item5 $item6 $item7 $item8 $item9;
	}
	$full: $item1;
	@for $i from 2 through length($items) {
		$item: nth($items, $i);
		@if $item != null {
			$full: $full $item
		}
	}
	@return $full;
}

@function -compass-list-size($list){
	@return length($list)
}